// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üë§ MOD√àLE UTILISATEUR SIMPLIFI√â
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Hash bcrypt
  nom       String?
  prenom    String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  a2f       Boolean  @default(false) // Authentification √† deux facteurs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // üîó RELATIONS
  qrCodes   QrCode[]
  barcodes  Barcode[]

  // Auto-r√©f√©rencement vers l'admin parrain (optionnel)
  adminId   String?
  admin     User?     @relation("UserAdmin", fields: [adminId], references: [id])
  subordinates User[] @relation("UserAdmin")

  // R√©f√©rence au code de parrainage utilis√©
  referralCodeId String? @unique
  referralCode   ReferralCode? @relation("ReferralUsed", fields: [referralCodeId], references: [id])

  // Codes g√©n√©r√©s si ADMIN
  referralsGenerated ReferralCode[] @relation("AdminReferralCodes")

  // Opposite relation for RoleConfig.configuredBy
  roleConfigsConfigured RoleConfig[] @relation("UserConfiguredRoleConfigs")
  
  @@map("users")
}

// üéØ MOD√àLE QR CODE
model QrCode {
  id           String   @id @default(cuid())
  typeProduit  String
  nomProduit   String
  franchise    String
  prixVente    Int      // en FCFA
  poids        Float
  unitePoids   String   // "g" ou "kg"
  fournisseur  String
  qrType       String   @default("raw") // "raw" ou "result"
  codePng      String   // QR code en base64 ou URL
  dateCreation DateTime @default(now())
  
  // üîó RELATION AVEC USER
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("qr_codes")
}

// üìä MOD√àLE CODE-BARRE
model Barcode {
  id           String   @id @default(cuid())
  nomProduit   String
  franchise    String
  reference    String   // R√©f√©rence unique du produit
  prixVente    Int      // en FCFA
  categorie    String   // Cat√©gorie du produit
  fournisseur  String
  codePng      String   // Code-barre en base64 ou URL
  dateCreation DateTime @default(now())
  
  // üîó RELATION AVEC USER
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("barcodes")
}

// üìä ENUM POUR LES R√îLES
enum Role {
  USER
  MODERATEUR
  ADMIN
}

// üîê Configuration de r√¥les persist√©e
model RoleConfig {
  id             String   @id @default(cuid())
  role           Role     @unique
  permissions    Json
  configuredById String?
  configuredBy   User?    @relation("UserConfiguredRoleConfigs", fields: [configuredById], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// üßæ Codes de parrainage
model ReferralCode {
  id            String   @id @default(cuid())
  code          String   @unique
  adminId       String
  admin         User     @relation("AdminReferralCodes", fields: [adminId], references: [id])
  usedByUser    User?    @relation("ReferralUsed")
  usedAt        DateTime?
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
}
